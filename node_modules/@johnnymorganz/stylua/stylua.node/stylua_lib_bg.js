import * as wasm from './stylua_lib_bg.wasm';

const lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;

let cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

let cachedUint8Memory0;
function getUint8Memory0() {
    if (cachedUint8Memory0.byteLength === 0) {
        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8Memory0;
}

function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

const heap = new Array(32).fill(undefined);

heap.push(undefined, null, true, false);

let heap_next = heap.length;

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

let WASM_VECTOR_LEN = 0;

const lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;

let cachedTextEncoder = new lTextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length);
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len);

    const mem = getUint8Memory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3);
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
    return instance.ptr;
}

let cachedInt32Memory0;
function getInt32Memory0() {
    if (cachedInt32Memory0.byteLength === 0) {
        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachedInt32Memory0;
}

function getObject(idx) { return heap[idx]; }

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}
/**
* @param {string} code
* @param {Config} config
* @param {Range | undefined} range
* @param {number} verify_output
* @returns {string}
*/
export function formatCode(code, config, range, verify_output) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(config, Config);
        var ptr1 = config.ptr;
        config.ptr = 0;
        let ptr2 = 0;
        if (!isLikeNone(range)) {
            _assertClass(range, Range);
            ptr2 = range.ptr;
            range.ptr = 0;
        }
        wasm.formatCode(retptr, ptr0, len0, ptr1, ptr2, verify_output);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        var ptr3 = r0;
        var len3 = r1;
        if (r3) {
            ptr3 = 0; len3 = 0;
            throw takeObject(r2);
        }
        return getStringFromWasm0(ptr3, len3);
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
        wasm.__wbindgen_free(ptr3, len3);
    }
}

/**
* The type of indents to use when indenting
*/
export const IndentType = Object.freeze({
/**
* Indent using tabs (`\t`)
*/
Tabs:0,"0":"Tabs",
/**
* Indent using spaces (` `)
*/
Spaces:1,"1":"Spaces", });
/**
* The type of line endings to use at the end of a line
*/
export const LineEndings = Object.freeze({
/**
* Unix Line Endings (LF) - `\n`
*/
Unix:0,"0":"Unix",
/**
* Windows Line Endings (CRLF) - `\r\n`
*/
Windows:1,"1":"Windows", });
/**
* The style of quotes to use within string literals
*/
export const QuoteStyle = Object.freeze({
/**
* Use double quotes where possible, but change to single quotes if it produces less escapes
*/
AutoPreferDouble:0,"0":"AutoPreferDouble",
/**
* Use single quotes where possible, but change to double quotes if it produces less escapes
*/
AutoPreferSingle:1,"1":"AutoPreferSingle",
/**
* Always use double quotes in all strings
*/
ForceDouble:2,"2":"ForceDouble",
/**
* Always use single quotes in all strings
*/
ForceSingle:3,"3":"ForceSingle", });
/**
* When to use call parentheses
*/
export const CallParenType = Object.freeze({
/**
* Use call parentheses all the time
*/
Always:0,"0":"Always",
/**
* Skip call parentheses when only a string argument is used.
*/
NoSingleString:1,"1":"NoSingleString",
/**
* Skip call parentheses when only a table argument is used.
*/
NoSingleTable:2,"2":"NoSingleTable",
/**
* Skip call parentheses when only a table or string argument is used.
*/
None:3,"3":"None", });
/**
* The type of verification to perform to validate that the output AST is still correct.
*/
export const OutputVerification = Object.freeze({
/**
* Reparse the generated output to detect any changes to code correctness.
*/
Full:0,"0":"Full",
/**
* Perform no verification of the output.
*/
None:1,"1":"None", });
/**
* The configuration to use when formatting.
*/
export class Config {

    static __wrap(ptr) {
        const obj = Object.create(Config.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_config_free(ptr);
    }
    /**
    * Creates a new Config with the default values
    * @returns {Config}
    */
    static new() {
        const ret = wasm.config_new();
        return Config.__wrap(ret);
    }
    /**
    * Returns the current configured column width
    * @returns {number}
    */
    column_width() {
        const ret = wasm.config_column_width(this.ptr);
        return ret >>> 0;
    }
    /**
    * Returns the current configured line endings
    * @returns {number}
    */
    line_endings() {
        const ret = wasm.config_line_endings(this.ptr);
        return ret >>> 0;
    }
    /**
    * Returns the current configured indent type
    * @returns {number}
    */
    indent_type() {
        const ret = wasm.config_indent_type(this.ptr);
        return ret >>> 0;
    }
    /**
    * Returns the current configured indent width
    * @returns {number}
    */
    indent_width() {
        const ret = wasm.config_indent_width(this.ptr);
        return ret >>> 0;
    }
    /**
    * Returns the current configured quote style
    * @returns {number}
    */
    quote_style() {
        const ret = wasm.config_quote_style(this.ptr);
        return ret >>> 0;
    }
    /**
    * Returns the current configured call parentheses style
    * @returns {number}
    */
    call_parentheses() {
        const ret = wasm.config_call_parentheses(this.ptr);
        return ret >>> 0;
    }
    /**
    * Returns a new config with the given column width
    * @param {number} column_width
    * @returns {Config}
    */
    with_column_width(column_width) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.config_with_column_width(ptr, column_width);
        return Config.__wrap(ret);
    }
    /**
    * Returns a new config with the given line endings
    * @param {number} line_endings
    * @returns {Config}
    */
    with_line_endings(line_endings) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.config_with_line_endings(ptr, line_endings);
        return Config.__wrap(ret);
    }
    /**
    * Returns a new config with the given indent type
    * @param {number} indent_type
    * @returns {Config}
    */
    with_indent_type(indent_type) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.config_with_indent_type(ptr, indent_type);
        return Config.__wrap(ret);
    }
    /**
    * Returns a new config with the given indent width
    * @param {number} indent_width
    * @returns {Config}
    */
    with_indent_width(indent_width) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.config_with_indent_width(ptr, indent_width);
        return Config.__wrap(ret);
    }
    /**
    * Returns a new config with the given quote style
    * @param {number} quote_style
    * @returns {Config}
    */
    with_quote_style(quote_style) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.config_with_quote_style(ptr, quote_style);
        return Config.__wrap(ret);
    }
    /**
    * Returns a new config with the given value for [`no_call_parentheses`]
    * @param {boolean} no_call_parentheses
    * @returns {Config}
    */
    with_no_call_parentheses(no_call_parentheses) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.config_with_no_call_parentheses(ptr, no_call_parentheses);
        return Config.__wrap(ret);
    }
    /**
    * Returns a new config with the given call parentheses type
    * @param {number} call_parentheses
    * @returns {Config}
    */
    with_call_parentheses(call_parentheses) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.config_with_call_parentheses(ptr, call_parentheses);
        return Config.__wrap(ret);
    }
}
/**
* An optional formatting range.
* If provided, only content within these boundaries (inclusive) will be formatted.
* Both boundaries are optional, and are given as byte offsets from the beginning of the file.
*/
export class Range {

    static __wrap(ptr) {
        const obj = Object.create(Range.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_range_free(ptr);
    }
    /**
    * Creates a new formatting range from the given start and end point.
    * All content within these boundaries (inclusive) will be formatted.
    * @param {number | undefined} start
    * @param {number | undefined} end
    * @returns {Range}
    */
    static from_values(start, end) {
        const ret = wasm.range_from_values(!isLikeNone(start), isLikeNone(start) ? 0 : start, !isLikeNone(end), isLikeNone(end) ? 0 : end);
        return Range.__wrap(ret);
    }
}

export function __wbindgen_string_new(arg0, arg1) {
    const ret = getStringFromWasm0(arg0, arg1);
    return addHeapObject(ret);
};

export function __wbindgen_throw(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
};

cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);

