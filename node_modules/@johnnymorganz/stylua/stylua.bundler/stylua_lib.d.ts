/* tslint:disable */
/* eslint-disable */
/**
* @param {string} code
* @param {Config} config
* @param {Range | undefined} range
* @param {number} verify_output
* @returns {string}
*/
export function formatCode(code: string, config: Config, range: Range | undefined, verify_output: number): string;
/**
* The type of indents to use when indenting
*/
export enum IndentType {
/**
* Indent using tabs (`\t`)
*/
  Tabs,
/**
* Indent using spaces (` `)
*/
  Spaces,
}
/**
* The type of line endings to use at the end of a line
*/
export enum LineEndings {
/**
* Unix Line Endings (LF) - `\n`
*/
  Unix,
/**
* Windows Line Endings (CRLF) - `\r\n`
*/
  Windows,
}
/**
* The style of quotes to use within string literals
*/
export enum QuoteStyle {
/**
* Use double quotes where possible, but change to single quotes if it produces less escapes
*/
  AutoPreferDouble,
/**
* Use single quotes where possible, but change to double quotes if it produces less escapes
*/
  AutoPreferSingle,
/**
* Always use double quotes in all strings
*/
  ForceDouble,
/**
* Always use single quotes in all strings
*/
  ForceSingle,
}
/**
* When to use call parentheses
*/
export enum CallParenType {
/**
* Use call parentheses all the time
*/
  Always,
/**
* Skip call parentheses when only a string argument is used.
*/
  NoSingleString,
/**
* Skip call parentheses when only a table argument is used.
*/
  NoSingleTable,
/**
* Skip call parentheses when only a table or string argument is used.
*/
  None,
}
/**
* What mode to use if we want to collapse simple functions / guard statements
*/
export enum CollapseSimpleStatement {
/**
* Never collapse
*/
  Never,
/**
* Collapse simple functions onto a single line
*/
  FunctionOnly,
/**
* Collapse simple if guards onto a single line
*/
  ConditionalOnly,
/**
* Collapse all simple statements onto a single line
*/
  Always,
}
/**
* The type of verification to perform to validate that the output AST is still correct.
*/
export enum OutputVerification {
/**
* Reparse the generated output to detect any changes to code correctness.
*/
  Full,
/**
* Perform no verification of the output.
*/
  None,
}
/**
* The configuration to use when formatting.
*/
export class Config {
  free(): void;
/**
* Creates a new Config with the default values
* @returns {Config}
*/
  static new(): Config;
/**
* Returns the current configured column width
* @returns {number}
*/
  column_width(): number;
/**
* Returns the current configured line endings
* @returns {number}
*/
  line_endings(): number;
/**
* Returns the current configured indent type
* @returns {number}
*/
  indent_type(): number;
/**
* Returns the current configured indent width
* @returns {number}
*/
  indent_width(): number;
/**
* Returns the current configured quote style
* @returns {number}
*/
  quote_style(): number;
/**
* Returns the current configured call parentheses style
* @returns {number}
*/
  call_parentheses(): number;
/**
* @returns {number}
*/
  collapse_simple_statement(): number;
/**
* Returns a new config with the given column width
* @param {number} column_width
* @returns {Config}
*/
  with_column_width(column_width: number): Config;
/**
* Returns a new config with the given line endings
* @param {number} line_endings
* @returns {Config}
*/
  with_line_endings(line_endings: number): Config;
/**
* Returns a new config with the given indent type
* @param {number} indent_type
* @returns {Config}
*/
  with_indent_type(indent_type: number): Config;
/**
* Returns a new config with the given indent width
* @param {number} indent_width
* @returns {Config}
*/
  with_indent_width(indent_width: number): Config;
/**
* Returns a new config with the given quote style
* @param {number} quote_style
* @returns {Config}
*/
  with_quote_style(quote_style: number): Config;
/**
* Returns a new config with the given value for `no_call_parentheses`
* @param {boolean} no_call_parentheses
* @returns {Config}
*/
  with_no_call_parentheses(no_call_parentheses: boolean): Config;
/**
* Returns a new config with the given call parentheses type
* @param {number} call_parentheses
* @returns {Config}
*/
  with_call_parentheses(call_parentheses: number): Config;
/**
* @param {number} collapse_simple_statement
* @returns {Config}
*/
  with_collapse_simple_statement(collapse_simple_statement: number): Config;
}
/**
* An optional formatting range.
* If provided, only content within these boundaries (inclusive) will be formatted.
* Both boundaries are optional, and are given as byte offsets from the beginning of the file.
*/
export class Range {
  free(): void;
/**
* Creates a new formatting range from the given start and end point.
* All content within these boundaries (inclusive) will be formatted.
* @param {number | undefined} start
* @param {number | undefined} end
* @returns {Range}
*/
  static from_values(start?: number, end?: number): Range;
}
